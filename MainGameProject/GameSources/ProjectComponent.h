/*!
@file ProjectBehavior.h
@brief プロジェク定義のComponentクラス
*/

#pragma once
#include "stdafx.h"

namespace basecross {

	enum class MotionType
	{
		Position,
		Rotation,
		Scaleing
	};

	struct AnimeData
	{
		float m_FlameCount;
		MotionType m_Type;
		Vec4 m_value;
		AnimeData(const float FlameCount,const MotionType Type,const Vec4 Value)
			:m_FlameCount(FlameCount),m_Type(Type),m_value(Value)
		{

		}
	};

	struct AnimeDatas
	{

	};

	//--------------------------------------------------------------------------------------
	///	
	//--------------------------------------------------------------------------------------
	class AnimationComponent : public Component 
	{
	public:
		//構築と破棄
		//--------------------------------------------------------------------------------------
		/*!
		@brief	プロテクトコンストラクタ
		@param[in]	GameObjectPtr	このコンポーネントを所持するゲームオブジェクト
		*/
		//--------------------------------------------------------------------------------------
		explicit AnimationComponent(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~AnimationComponent();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	Runフラグをセットする
		@param[in]	b	Runフラグ
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetRun(bool b);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	到着フラグをセットする
		@param[in]	b	到着フラグ
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetArrived(bool b);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	NowTimeを加算して、TotalTimeと比較する
		@return	到着していればtrue
		*/
		//--------------------------------------------------------------------------------------
		bool AdditionalNowTime();
		//アクセサ
		//--------------------------------------------------------------------------------------
		/*!
		@brief	実行中かどうかを得る
		@return	実行中ならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool IsRun()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	実行中かどうかを得る
		@return	実行中ならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetRun()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	到着したかどうかを得る
		@return	到着したらtrue
		*/
		//--------------------------------------------------------------------------------------
		bool IsArrived()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	到着したかどうかを得る
		@return	到着したらtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetArrived()const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在時間を得る
		@return	このアクションの現在時間
		*/
		//--------------------------------------------------------------------------------------
		virtual float GetNowTime() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在時間を設定する
		@param[in]	f	現在時間
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetNowTime(float f);
		//操作
		//--------------------------------------------------------------------------------------
		/*!
		@brief	アクションを止める
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void Stop();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	アクションを再スタートする
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void ReStart();

		virtual void OnCreate()override {}

		virtual void OnUpdate()override {}

		virtual void OnDraw()override {}
	private:
		////--------------------------------------------------------------------------------------
		///*!
		//@brief	アニメーションを実行する
		//@return	なし
		//*/
		////--------------------------------------------------------------------------------------
		//void Run();

		Vec4 ConvertToVec4(Quat quat)
		{
			return Vec4(quat.x, quat.y, quat.z, quat.w);
		}

		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};

}

//end basecross

